package main

import (
	"VKBotAPI/storage"
	"bytes"
	"context"
	"database/sql"
	"encoding/gob"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"math/rand"
	"net/http"
	"os"
	"regexp"
	"strconv"
	"strings"
	"time"

	"github.com/SevereCloud/vksdk/v2/api"
	"github.com/SevereCloud/vksdk/v2/api/params"
	"github.com/SevereCloud/vksdk/v2/events"
	"github.com/SevereCloud/vksdk/v2/longpoll-bot"
	"github.com/joho/godotenv"
	"github.com/jordan-patterson/gtts"
	_ "github.com/lib/pq"
	"github.com/sirupsen/logrus"
	"github.com/spf13/viper"
	"golang.org/x/text/encoding/charmap"
)

var (
	vk                 *api.VK
	convs              []Converse
	ChatGPTHTTPAddress = "https://api.openai.com/v1/chat/completions"
)

func main() {
	logrus.SetFormatter(new(logrus.JSONFormatter))
	if err := initConfig(); err != nil {
		logrus.Fatalf("error init configs: %s", err.Error())
	}

	if err := godotenv.Load(); err != nil {
		logrus.Fatalf("error loading env vars: %s", err.Error())
	}

	CheckWhiteList := viper.GetBool("checkWhiteList")

	cfg := storage.Config{
		Host:     viper.GetString("db.host"),
		Port:     viper.GetString("db.port"),
		Username: viper.GetString("db.username"),
		DBName:   viper.GetString("db.db"),
		SSLMode:  viper.GetString("db.ssl"),
		Password: os.Getenv("DB_PASSWORD"),
	}

	db, err := storage.NewPostgresDB(cfg)
	if err != nil {
		logrus.Fatalf("error while init db connection: %s", err.Error())
	}

	repos := storage.NewStorage(db)

	vk = api.NewVK(os.Getenv("VK_TOKEN"))

	group, err := vk.GroupsGetByID(nil)
	if err != nil {
		log.Fatal(err)
	}

	lp, err := longpoll.NewLongPoll(vk, group[0].ID)
	if err != nil {
		log.Fatal(err)
	}

	lp.Goroutine(true)

	lp.GroupJoin(func(_ context.Context, obj events.GroupJoinObject) {
		fmt.Println("groupJoin")
		log.Printf("%#v", obj)
	})

	lp.GroupLeave(func(_ context.Context, obj events.GroupLeaveObject) {
		fmt.Println("groupLeave")
		log.Printf("%#v", obj)
	})

	lp.MessageNew(func(_ context.Context, obj events.MessageNewObject) {

		var msg = "nil"
		var attachment string
		mention := true
		if obj.Message.Action.Type == "" {
			log.Printf("%d | %d: %s", obj.Message.PeerID, obj.Message.FromID, obj.Message.Text)
			switch cmd := obj.Message.Text; {
			case cmd == "/help":
				msg = `
				–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

				/help - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã.
				/online - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–Ω–ª–∞–π–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞—Ö Diamond.
				/find - –ø—Ä–æ—Å–º–æ—Ç—Ä —Ñ–∏–Ω–¥–∞ –º–µ–¥. —Ü–µ–Ω—Ç—Ä–æ–≤
				/8ball - –º–∞–≥–∏—á–µ—Å–∫–∏–π —à–∞—Ä.
				/infa [–¢–µ–∫—Å—Ç] - —É–∑–Ω–∞—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–æ–±—ã—Ç–∏—è.
				/kto [–£–ø–æ–º—è–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è] - —É–∑–Ω–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ/–¥–µ–π—Å—Ç–≤–∏—è/–∂–µ–ª–∞–Ω–∏—è —ç—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞.
				/who [–û–ø–∏—Å–∞–Ω–∏–µ] - —É–∑–Ω–∞—Ç—å –∫—Ç–æ –≤ –±–µ—Å–µ–¥–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ–¥ –≤–∞—à–µ –æ–ø–∏—Å–∞–Ω–∏–µ.
				/random [–ú–∏–Ω. —á–∏—Å–ª–æ] [–ú–∞–∫. —á–∏—Å–ª–æ].
				/rep [–í–æ–ø—Ä–æ—Å] - —Å–ø—Ä–æ—Å–∏—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å –≤ —Ä–µ–ø–æ—Ä—Ç (–Ω–µ –≤ –∏–≥—Ä—É).
				/leaders - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–∏–¥–µ—Ä–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
				/mzcoins - –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Coin's
				/–∞–Ω–µ–∫–¥–æ—Ç - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–µ–∫–¥–æ—Ç.
				/v [–¢–µ–∫—Å—Ç] - –ø–µ—Ä–µ–≤–æ–¥ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
				/last_update - —É–∑–Ω–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é MZ Helper'–∞.`
			case cmd == "/online":
				msg, err = getOnlineDRP()
				if err != nil {
					VKSendError(err, obj.Message.PeerID)
					break
				}
			case cmd == "/find":
				var find Find
				var pl string

				row := db.QueryRow("SELECT * FROM find WHERE id = 1")
				if err := row.Scan(&find.ID, &find.LS, &find.SF, &find.LV, &pl, &find.Client, &find.IP, &find.TS); err != nil {
					if err == sql.ErrNoRows {
						fmt.Printf("%#v\n", err)
						VKSendError(errors.New("–ó–∞–ø–∏—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."), obj.Message.PeerID)
						break
					}
					fmt.Printf("%#v\n", err)
					VKSendError(errors.New("–í–æ –≤—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞."), obj.Message.PeerID)
					break
				}

				var players, tmS, stLS, stSF, stLV string
				var avFind = find.LS + find.SF + find.LV

				if ok := json.Unmarshal([]byte(pl), &find.Players); ok != nil {
					VKSendError(ok, obj.Message.PeerID)
				}

				for _, v := range find.Players {
					players = players + v + "\n"
				}

				if len(find.Players) == 0 {
					players = "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"
				}

				tm := time.Unix(int64(find.TS), 0)

				tmS = tm.Format("15:04:05 / 02.01.2006 Mon")

				tmS = strings.Replace(tmS, "Mon", "–ü–Ω", 1)
				tmS = strings.Replace(tmS, "Tue", "–í—Ç", 1)
				tmS = strings.Replace(tmS, "Wed", "–°—Ä", 1)
				tmS = strings.Replace(tmS, "Thu", "–ß—Ç", 1)
				tmS = strings.Replace(tmS, "Fri", "–ü—Ç", 1)
				tmS = strings.Replace(tmS, "Sat", "–°–±", 1)
				tmS = strings.Replace(tmS, "Sun", "–í—Å", 1)

				if int(time.Now().Unix())-(find.TS+900) > 0 {
					tmS = tmS + "\n\n‚è± –î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –±–æ–ª–µ–µ 15-—Ç–∏ –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥! ‚è±"
				}

				if avFind != 0 {
					avFind = avFind / 3
				}

				if find.LS <= 1 {
					stLS = "‚Äº"
				} else if find.LS <= 3 {
					stLS = "‚ö†"
				} else {
					stLS = "‚úÖ"
				}

				if find.SF <= 1 {
					stSF = "‚Äº"
				} else if find.SF <= 3 {
					stSF = "‚ö†"
				} else {
					stSF = "‚úÖ"
				}

				if find.LV <= 1 {
					stLV = "‚Äº"
				} else if find.LV <= 3 {
					stLV = "‚ö†"
				} else {
					stLV = "‚úÖ"
				}

				// for _, v := range pl {
				// 	players = players + v + "\n"
				// }

				msg = fmt.Sprintf(
					"–§–∏–Ω–¥—ã –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö —Ü–µ–Ω—Ç—Ä–æ–≤: üë•\nLos-Santos Med. C. - %d %s\nSan-Fierro Med. C. - %d %s\nLas-Venturas Med. C. - %d %s\n\n–°—Ç–∞—Ä—à–∏–π —Å–æ—Å—Ç–∞–≤ –æ–Ω–ª–∞–π–Ω: üë§\n%s\n\n–°—Ä–µ–¥–Ω–∏–π —Ñ–∏–Ω–¥ –≤—Å–µ—Ö –º–µ–¥ —Ü–µ–Ω—Ç—Ä–æ–≤: %d\n–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: %s\nby %s",
					find.LS, stLS,
					find.SF, stSF,
					find.LV, stLV,
					players,
					avFind,
					tmS,
					find.Client,
				)

			case MatchString("^/8ball .+$", cmd):
				bl := []string{"–ë–µ—Å—Å–ø–æ—Ä–Ω–æ", "–ü—Ä–µ–¥—Ä–µ—à–µ–Ω–æ", "–ù–∏–∫–∞–∫–∏—Ö —Å–æ–º–Ω–µ–Ω–∏–π", "–û–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ –¥–∞", "–ú–æ–∂–µ—à—å –±—ã—Ç—å —É–≤–µ—Ä–µ–Ω –≤ —ç—Ç–æ–º", "–ú–Ω–µ –∫–∞–∂–µ—Ç—Å—è ‚Äî ¬´–¥–∞¬ª", "–í–µ—Ä–æ—è—Ç–Ω–µ–µ –≤—Å–µ–≥–æ", "–•–æ—Ä–æ—à–∏–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã", "–ó–Ω–∞–∫–∏ –≥–æ–≤–æ—Ä—è—Ç ‚Äî ¬´–¥–∞¬ª", "–î–∞", "–ü–æ–∫–∞ –Ω–µ —è—Å–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞", "–°–ø—Ä–æ—Å–∏ –ø–æ–∑–∂–µ", "–õ—É—á—à–µ –Ω–µ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å", "–°–µ–π—á–∞—Å –Ω–µ–ª—å–∑—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å", "–°–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä—É–π—Å—è –∏ —Å–ø—Ä–æ—Å–∏ –æ–ø—è—Ç—å", "–î–∞–∂–µ –Ω–µ –¥—É–º–∞–π", "–ú–æ–π –æ—Ç–≤–µ—Ç ‚Äî ¬´–Ω–µ—Ç¬ª", "–ü–æ –º–æ–∏–º –¥–∞–Ω–Ω—ã–º ‚Äî ¬´–Ω–µ—Ç¬ª", "–ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã –Ω–µ –æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–∏–µ", "–í–µ—Å—å–º–∞ —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω–æ"}
				rand.Seed(time.Now().UnixNano())

				msg = bl[rand.Intn(len(bl))]
			case MatchString("^/infa .+", cmd):
				rand.Seed(time.Now().UnixNano())

				bl := []string{"–≤–µ—Ä–æ—è—Ç–Ω–µ–µ –≤—Å–µ–≥–æ", "—Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ", "–≤–æ–∑–º–æ–∂–Ω–æ"}
				poss := rand.Intn(100)

				res, err := GetUsersInfo([]string{fmt.Sprintf("%d", obj.Message.FromID)})
				if err != nil {
					VKSendError(err, obj.Message.PeerID)
					break
				}
				msg = fmt.Sprintf("[id%d|%s], %s %d%%", obj.Message.FromID, res[0].FirstName, bl[rand.Intn(len(bl))], poss)
			case MatchString("^/kto", cmd):
				rand.Seed(time.Now().UnixNano())
				blF := []string{
					"–Ω—É–∂–Ω–æ –∏–¥—Ç–∏ –¥–µ–ª–∞—Ç—å —É—Ä–æ–∫–∏",
					"–ø–æ—Ö–æ–∂–∞ –Ω–∞ –±–∏–≥–∏–º–æ—Ç–∞",
					"–≤—Å–ø–æ–º–Ω–∏–ª–∞! –ì–µ–æ–º–µ—Ç—Ä–∏—è, –±–ª*–Ω!",
					"–≤—Å—Ç–∞–ª–∞ –Ω–∞ –ª–∏–¥–µ—Ä–∫—É",
					"—Ä–µ—à–∏–ª–∞, —á—Ç–æ –µ–º—É –ª—É—á—à–µ —É–π—Ç–∏ –ü–°–ñ",
					"—Ö–æ—á–µ—Ç –∫—É—à–∞—Ç—å",
					"—Ö–æ—á–µ—Ç –ø–∏—Ç—å",
					"—Ö–æ—á–µ—Ç –±–∞—Ö–Ω—É—Ç—å –ø–∏–≤–∫–∞",
					"–ø–æ—Ö–æ–∂–∞ –Ω–∞ –ø–æ–º–∏–¥–æ—Ä",
					"–ø—Ä–∏–æ–±—Ä–µ–ª–∞ –∑–µ–Ω–∏—Ç–Ω—ã–π —Ä–∞–∫–µ—Ç–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å Luftfaust-B",
					"—Ö–æ—á–µ—Ç –∫–∞—Ä—Ç–æ—à–∫–∏",
					"—Å–∫–∞–∑–∞–ª–∞:<br> –ü—Ä–∏–≤–µ—Ç, —è –ø–æ–¥—Å—è–¥—É? –°–ø–∞—Å–∏–±–æ.<br>–ü–æ—á–µ–º—É —É –º–µ–Ω—è –Ω–∞ —Ä—é–∫–∑–∞–∫–µ —Å–∞–º–ø–æ–≤—Å–∫–∏–π –∑–Ω–∞—á–æ–∫? –ù—É, –ø—Ä–æ—Å—Ç–æ –º–Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è —Å–∞–º–ø.<br>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é –ª–∏ —è Diamond? –î–∞.<br>–î–∞, —è —è–≤–ª—è—é—Å—å —á–∞—Å—Ç—å—é —Å–æ–æ–±—â–µ—Å—Ç–≤–∞. –ê –ø–æ—á–µ–º—É —Ç—ã —Å–ø—Ä–∞—à–∏–≤–∞–µ—à—å?<br>–í —Å–º—ã—Å–ª–µ –Ω–∞–≤—è–∑—ã–≤–∞—é —Ç–µ–±–µ —á—Ç–æ-—Ç–æ? –¢–∞–∫ —Ç—ã –∂–µ —Å–∞–º —Å–ø—Ä–æ—Å–∏–ª. –õ–∞–¥–Ω–æ.<br>–•–æ—á—É –ª–∏ —è —Å–≤–æ—é –ø–æ–¥—Ä—É–∂–∫—É? –ë–æ–∂–µ, –Ω–µ—Ç, –∫–æ–Ω–µ—á–Ω–æ. –ü–æ—á–µ–º—É —è –¥–æ–ª–∂–Ω–∞ –µ—ë —Ö–æ—Ç–µ—Ç—å?<br>–í —Å–º—ã—Å–ª–µ –≤—Å–µ—Ö? –ù–µ—Ç, –ø–æ—Å—Ç–æ–π, —ç—Ç–æ –Ω–µ —Ç–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–º–Ω–æ–∂–∫–æ. –¢–µ–±–µ –æ–±—ä—è—Å–Ω–∏—Ç—å?<br>–ù–µ –Ω–∞–¥–æ –ø—Ä–æ–ø–∞–≥–∞–Ω–¥–∏—Ä–æ–≤–∞—Ç—å? –Ø –Ω–µ –ø—Ä–æ–ø–∞–≥–∞–Ω–¥–∏—Ä—É—é, —Ç—ã –ø—Ä–æ—Å—Ç–æ —Å–∞–º —Å–ø—Ä–æ—Å–∏–ª —É –º–µ–Ω—è‚Ä¶ –Ø—Å–Ω–æ, —è —Å—É–º–∞—à–µ–¥—à–∞—è. –ö–∞–∫ –∏ –≤—Å–µ.<br>–õ–∞–¥–Ω–æ, –∏–∑–≤–∏–Ω–∏, —á—Ç–æ –ø–æ—Ç—Ä–µ–≤–æ–∂–∏–ª–∞.<br> <br> –Ø –æ—Ç—Å—è–¥—É.",
					"–ø–æ—Ä–∞ –∫—Ä–∞—Å–∏—Ç—å —Ä–∏—Å–Ω–∏—á–∫–∏",
					"—Å–æ—à–ª–∞—Å—É–º–∞—Å–æ—à–ª–∞—Å—É–º–∞—Å–æ—à–ª–∞—Å—É–º–∞—Å–æ—à–ª–∞—Å—É–º–∞—Å–æ—à–ª–∞—Å—É–º–∞—Å–æ—à–ª–∞—Å—É–º–∞—Å–æ—à–ª–∞—Å—É–º–∞—Å–æ—à–ª–∞—Å—É–º–∞—Å–æ—à–ª–∞—Å—É–º–∞—Å–æ—à–ª–∞—Å—É–º–∞—Å–æ—à–ª–∞—Å—É–º–∞—Å–æ—à–ª–∞—Å—É–º–∞—Å–æ—à–ª–∞—Å—É–º–∞—Å–æ—à–ª–∞—Å—É–º–∞—Å–æ—à–ª–∞—Å—É–º–∞—Å–æ—à–ª–∞—Å—É–º–∞—Å–æ—à–ª–∞—Å—É–º–∞—Å–æ—à–ª–∞—Å—É–º–∞—Å–æ—à–ª–∞—Å—É–º–∞—Å–æ—à–ª–∞—Å—É–º–∞—Å–æ—à–ª–∞—Å—É–º–∞—Å–æ—à–ª–∞—Å—É–º–∞—Å–æ—à–ª–∞—Å—É–º–∞—Å–æ—à–ª–∞—Å—É–º–∞—Å–æ—à–ª–∞—Å—É–º–∞—Å–æ—à–ª–∞—Å—É–º–∞—Å–æ—à–ª–∞—Å—É–º–∞—Å–æ—à–ª–∞—Å—É–º–∞—Å–æ—à–ª–∞—Å—É–º–∞—Å–æ—à–ª–∞—Å—É–º–∞—Å–æ—à–ª–∞—Å—É–º–∞—Å–æ—à–ª–∞—Å—É–º–∞—Å–æ—à–ª–∞—Å—É–º–∞—Å–æ—à–ª–∞—Å—É–º–∞—Å–æ—à–ª–∞—Å—É–º–∞—Å–æ—à–ª–∞—Å—É–º–∞—Å–æ—à–ª–∞—Å—É–º–∞—Å–æ—à–ª–∞—Å—É–º–∞—Å–æ—à–ª–∞—Å—É–º–∞—Å–æ—à–ª–∞—Å—É–º–∞—Å–æ—à–ª–∞—Å—É–º–∞—Å–æ—à–ª–∞—Å—É–º–∞—Å–æ—à–ª–∞—Å—É–º–∞—Å–æ—à–ª–∞—Å—É–º–∞—Å–æ—à–ª–∞—Å—É–º–∞—Å–æ—à–ª–∞—Å—É–º–∞—Å–æ—à–ª–∞—Å—É–º–∞—Å–æ—à–ª–∞—Å—É–º–∞—Å–æ—à–ª–∞—Å—É–º–∞—Å–æ—à–ª–∞—Å—É–º–∞—Å–æ—à–ª–∞—Å—É–º–∞—Å–æ—à–ª–∞—Å—É–º–∞—Å–æ—à–ª–∞—Å—É–º–∞—Å–æ—à–ª–∞—Å—É–º–∞—Å–æ—à–ª–∞—Å—É–º–∞—Å–æ—à–ª–∞—Å—É–º–∞—Å–æ—à–ª–∞—Å—É–º–∞—Å–æ—à–ª–∞—Å—É–º–∞—Å–æ—à–ª–∞—Å—É–º–∞—Å–æ—à–ª–∞—Å—É–º–∞—Å–æ—à–ª–∞—Å—É–º–∞—Å–æ—à–ª–∞—Å—É–º–∞—Å–æ—à–ª–∞—Å—É–º–∞—Å–æ—à–ª–∞—Å—É–º–∞—Å–æ—à–ª–∞—Å—É–º–∞—Å–æ—à–ª–∞—Å—É–º–∞—Å–æ—à–ª–∞—Å—É–º–∞—Å–æ—à–ª–∞—Å—É–º–∞—Å–æ—à–ª–∞—Å—É–º–∞—Å–æ—à–ª–∞—Å—É–º–∞—Å–æ—à–ª–∞—Å—É–º–∞—Å–æ—à–ª–∞—Å—É–º–∞—Å–æ—à–ª–∞—Å—É–º–∞—Å–æ—à–ª–∞—Å—É–º–∞—Å–æ—à–ª–∞—Å—É–º–∞—Å–æ—à–ª–∞—Å—É–º–∞—Å–æ—à–ª–∞—Å—É–º–∞—Å–æ—à–ª–∞—Å—É–º–∞—Å–æ—à–ª–∞—Å—É–º–∞—Å–æ—à–ª–∞—Å—É–º–∞—Å–æ—à–ª–∞—Å—É–º–∞—Å–æ—à–ª–∞—Å—É–º–∞—Å–æ—à–ª–∞—Å—É–º–∞—Å–æ—à–ª–∞—Å—É–º–∞",
				}
				blM := []string{
					"–Ω—É–∂–Ω–æ –∏–¥—Ç–∏ –¥–µ–ª–∞—Ç—å —É—Ä–æ–∫–∏",
					"–ø–æ—Ö–æ–∂ –Ω–∞ –±–∏–≥–∏–º–æ—Ç–∞",
					"–≤—Å–ø–æ–º–Ω–∏–ª! –ì–µ–æ–º–µ—Ç—Ä–∏—è, –±–ª*–Ω!",
					"–≤—Å—Ç–∞–ª –Ω–∞ –ª–∏–¥–µ—Ä–∫—É",
					"—Ä–µ—à–∏–ª, —á—Ç–æ –µ–º—É –ª—É—á—à–µ —É–π—Ç–∏ –ü–°–ñ",
					"—Ö–æ—á–µ—Ç –∫—É—à–∞—Ç—å",
					"—Ö–æ—á–µ—Ç –ø–∏—Ç—å",
					"—Ö–æ—á–µ—Ç –±–∞—Ö–Ω—É—Ç—å –ø–∏–≤–∫–∞",
					"–ø–æ—Ö–æ–∂ –Ω–∞ –ø–æ–º–∏–¥–æ—Ä",
					"–ø—Ä–∏–æ–±—Ä–µ–ª –∑–µ–Ω–∏—Ç–Ω—ã–π —Ä–∞–∫–µ—Ç–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å Luftfaust-B",
					"—Ö–æ—á–µ—Ç –∫–∞—Ä—Ç–æ—à–∫–∏",
					"—Å–∫–∞–∑–∞–ª:<br> –ü—Ä–∏–≤–µ—Ç, —è –ø–æ–¥—Å—è–¥—É? –°–ø–∞—Å–∏–±–æ.<br>–ü–æ—á–µ–º—É —É –º–µ–Ω—è –Ω–∞ —Ä—é–∫–∑–∞–∫–µ —Å–∞–º–ø–æ–≤—Å–∫–∏–π –∑–Ω–∞—á–æ–∫? –ù—É, –ø—Ä–æ—Å—Ç–æ –º–Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è —Å–∞–º–ø.<br>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é –ª–∏ —è Diamond? –î–∞.<br>–î–∞, —è —è–≤–ª—è—é—Å—å —á–∞—Å—Ç—å—é —Å–æ–æ–±—â–µ—Å—Ç–≤–∞. –ê –ø–æ—á–µ–º—É —Ç—ã —Å–ø—Ä–∞—à–∏–≤–∞–µ—à—å?<br>–í —Å–º—ã—Å–ª–µ –Ω–∞–≤—è–∑—ã–≤–∞—é —Ç–µ–±–µ —á—Ç–æ-—Ç–æ? –¢–∞–∫ —Ç—ã –∂–µ —Å–∞–º —Å–ø—Ä–æ—Å–∏–ª. –õ–∞–¥–Ω–æ.<br>–•–æ—á—É –ª–∏ —è —Å–≤–æ–µ–≥–æ –¥—Ä—É–≥–∞? –ë–æ–∂–µ, –Ω–µ—Ç, –∫–æ–Ω–µ—á–Ω–æ. –ü–æ—á–µ–º—É —è –¥–æ–ª–∂–µ–Ω –µ–≥–æ —Ö–æ—Ç–µ—Ç—å?<br>–í —Å–º—ã—Å–ª–µ –≤—Å–µ—Ö? –ù–µ—Ç, –ø–æ—Å—Ç–æ–π, —ç—Ç–æ –Ω–µ —Ç–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–º–Ω–æ–∂–∫–æ. –¢–µ–±–µ –æ–±—ä—è—Å–Ω–∏—Ç—å?<br>–ù–µ –Ω–∞–¥–æ –ø—Ä–æ–ø–∞–≥–∞–Ω–¥–∏—Ä–æ–≤–∞—Ç—å? –Ø –Ω–µ –ø—Ä–æ–ø–∞–≥–∞–Ω–¥–∏—Ä—É—é, —Ç—ã –ø—Ä–æ—Å—Ç–æ —Å–∞–º —Å–ø—Ä–æ—Å–∏–ª —É –º–µ–Ω—è‚Ä¶ –Ø—Å–Ω–æ, —è —Å—É–º–∞—à–µ–¥—à–∏–π. –ö–∞–∫ –∏ –≤—Å–µ.<br>–õ–∞–¥–Ω–æ, –∏–∑–≤–∏–Ω–∏, —á—Ç–æ –ø–æ—Ç—Ä–µ–≤–æ–∂–∏–ª.<br> <br> –Ø –æ—Ç—Å—è–¥—É.",
					"–ø–æ—Ä–∞ –∫—Ä–∞—Å–∏—Ç—å —Ä–∏—Å–Ω–∏—á–∫–∏",
					"—Å–æ—à–µ–ª—Å—É–º–∞—Å–æ—à–µ–ª—Å—É–º–∞—Å–æ—à–µ–ª—Å—É–º–∞—Å–æ—à–µ–ª—Å—É–º–∞—Å–æ—à–µ–ª—Å—É–º–∞—Å–æ—à–µ–ª—Å—É–º–∞—Å–æ—à–µ–ª—Å—É–º–∞—Å–æ—à–µ–ª—Å—É–º–∞—Å–æ—à–µ–ª—Å—É–º–∞—Å–æ—à–µ–ª—Å—É–º–∞—Å–æ—à–µ–ª—Å—É–º–∞—Å–æ—à–µ–ª—Å—É–º–∞—Å–æ—à–µ–ª—Å—É–º–∞—Å–æ—à–µ–ª—Å—É–º–∞—Å–æ—à–µ–ª—Å—É–º–∞—Å–æ—à–µ–ª—Å—É–º–∞—Å–æ—à–µ–ª—Å—É–º–∞—Å–æ—à–µ–ª—Å—É–º–∞—Å–æ—à–µ–ª—Å—É–º–∞—Å–æ—à–µ–ª—Å—É–º–∞—Å–æ—à–µ–ª—Å—É–º–∞—Å–æ—à–µ–ª—Å—É–º–∞—Å–æ—à–µ–ª—Å—É–º–∞—Å–æ—à–µ–ª—Å—É–º–∞—Å–æ—à–µ–ª—Å—É–º–∞—Å–æ—à–µ–ª—Å—É–º–∞—Å–æ—à–µ–ª—Å—É–º–∞—Å–æ—à–µ–ª—Å—É–º–∞—Å–æ—à–µ–ª—Å—É–º–∞—Å–æ—à–µ–ª—Å—É–º–∞—Å–æ—à–µ–ª—Å—É–º–∞—Å–æ—à–µ–ª—Å—É–º–∞—Å–æ—à–µ–ª—Å—É–º–∞—Å–æ—à–µ–ª—Å—É–º–∞—Å–æ—à–µ–ª—Å—É–º–∞—Å–æ—à–µ–ª—Å—É–º–∞—Å–æ—à–µ–ª—Å—É–º–∞—Å–æ—à–µ–ª—Å—É–º–∞—Å–æ—à–µ–ª—Å—É–º–∞—Å–æ—à–µ–ª—Å—É–º–∞—Å–æ—à–µ–ª—Å—É–º–∞—Å–æ—à–µ–ª—Å—É–º–∞—Å–æ—à–µ–ª—Å—É–º–∞—Å–æ—à–µ–ª—Å—É–º–∞—Å–æ—à–µ–ª—Å—É–º–∞—Å–æ—à–µ–ª—Å—É–º–∞—Å–æ—à–µ–ª—Å—É–º–∞—Å–æ—à–µ–ª—Å—É–º–∞—Å–æ—à–µ–ª—Å—É–º–∞—Å–æ—à–µ–ª—Å—É–º–∞—Å–æ—à–µ–ª—Å—É–º–∞—Å–æ—à–µ–ª—Å—É–º–∞—Å–æ—à–µ–ª—Å—É–º–∞—Å–æ—à–µ–ª—Å—É–º–∞—Å–æ—à–µ–ª—Å—É–º–∞—Å–æ—à–µ–ª—Å—É–º–∞—Å–æ—à–µ–ª—Å—É–º–∞—Å–æ—à–µ–ª—Å—É–º–∞—Å–æ—à–µ–ª—Å—É–º–∞—Å–æ—à–µ–ª—Å—É–º–∞—Å–æ—à–µ–ª—Å—É–º–∞—Å–æ—à–µ–ª—Å—É–º–∞—Å–æ—à–µ–ª—Å—É–º–∞—Å–æ—à–µ–ª—Å—É–º–∞—Å–æ—à–µ–ª—Å—É–º–∞—Å–æ—à–µ–ª—Å—É–º–∞—Å–æ—à–µ–ª—Å—É–º–∞—Å–æ—à–µ–ª—Å—É–º–∞—Å–æ—à–µ–ª—Å—É–º–∞—Å–æ—à–µ–ª—Å—É–º–∞—Å–æ—à–µ–ª—Å—É–º–∞—Å–æ—à–µ–ª—Å—É–º–∞—Å–æ—à–µ–ª—Å—É–º–∞—Å–æ—à–µ–ª—Å—É–º–∞—Å–æ—à–µ–ª—Å—É–º–∞—Å–æ—à–µ–ª—Å—É–º–∞—Å–æ—à–µ–ª—Å—É–º–∞—Å–æ—à–µ–ª—Å—É–º–∞—Å–æ—à–µ–ª—Å—É–º–∞—Å–æ—à–µ–ª—Å—É–º–∞—Å–æ—à–µ–ª—Å—É–º–∞—Å–æ—à–µ–ª—Å—É–º–∞—Å–æ—à–µ–ª—Å—É–º–∞—Å–æ—à–µ–ª—Å—É–º–∞",
				}
				re := regexp.MustCompile(`^/kto \[id(\d+)\|.+\]$`)
				res := re.FindAllStringSubmatch(cmd, -1)
				if len(res) == 0 {
					msg = "/kto [–£–ø–æ–º—è–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è]"
					break
				}

				user, err := GetUsersInfo([]string{res[0][1]})
				if err != nil {
					VKSendError(err, obj.Message.PeerID)
					break
				}

				// msg = fmt.Sprintf("%#v", user[0])
				var action string
				if user[0].Sex == 1 {
					action = blF[rand.Intn(len(blF))]
				} else {
					action = blM[rand.Intn(len(blM))]
				}
				msg = fmt.Sprintf("[id%s|%s] %s", res[0][1], user[0].FirstName, action)

			case MatchString("^/who .+", cmd):
				rand.Seed(time.Now().UnixNano())
				p := params.NewMessagesGetConversationMembersBuilder()

				p.PeerID(obj.Message.PeerID)
				p.Fields([]string{"sex"})

				res, err := vk.MessagesGetConversationMembers(p.Params)
				if err != nil {
					VKSendError(err, obj.Message.PeerID)
				}

				target := res.Profiles[rand.Intn(len(res.Profiles))]

				if obj.Message.FromID == target.ID {
					msg = fmt.Sprintf("–≠—Ç–æ [id%d|—Ç—ã] )0", target.ID)
					break
				}
				msg = fmt.Sprintf("–≠—Ç–æ [id%d|%s %s]", target.ID, target.FirstName, target.LastName)
			case MatchString("^/rand", cmd):
				rand.Seed(time.Now().UnixNano())

				re := regexp.MustCompile(`^/rand (-?\d+) (-?\d+)$`)
				res := re.FindAllStringSubmatch(cmd, -1)
				if len(res) == 0 {
					msg = "/rand [min] [max]"
					break
				}
				// 2147483647
				min, err := strconv.Atoi(res[0][1])
				if err != nil {
					VKSendError(errors.New("min: –≤—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ"), obj.Message.PeerID)
					break
				}

				max, err := strconv.Atoi(res[0][2])
				if err != nil {
					VKSendError(errors.New("max: –≤—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ"), obj.Message.PeerID)
					break
				}

				if max > 2147483645 || min <= 0 {
					msg = "–ß–∏—Å–ª–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ, —Ä–∞–≤–Ω–æ –Ω—É–ª—é –ª–∏–±–æ –º–µ–Ω—å—à–µ –Ω—É–ª—è."
					break
				}

				randRes := rand.Intn((max+1)-min) + min

				msg = fmt.Sprintf("–†–µ–∑—É–ª—å—Ç–∞—Ç: %d.", randRes)
			case MatchString("^/rep .+", cmd):
				rand.Seed(time.Now().UnixNano())

				bl := []string{
					"–°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏ –ø—Ä–æ–µ–∫—Ç–∞.",
					"–ü—Ä–∏—è—Ç–Ω–æ–π –∏–≥—Ä—ã!",
					"–°–ª–µ–∂—É",
					"–†–ü –ø—Ä–æ—Ü–µ—Å—Å",
					"–£–∑–Ω–∞–π—Ç–µ –†–ü –ø—É—Ç–µ–º",
					"–ù–µ —É–≤–∏–¥–µ–ª –Ω–∞—Ä—É—à–µ–Ω–∏–π —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã –∏–≥—Ä–æ–∫–∞",
					"–ù–µ—Ç",
					"–î–∞",
					"–ö–æ–Ω–µ—á–Ω–æ",
					"–ù–µ –æ—Ñ—Ñ—Ç–æ–ø—å—Ç–µ",
					"–ê–¥–µ–∫–≤–∞—Ç–Ω–µ–µ",
					"–ù–µ –ø–æ–Ω—è–ª —Å—É—Ç–∏ –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞",
					"–û—Å—É–∂–¥–∞—é",
					"–ó–∞—á–µ–º?",
					"–ü–µ—Ä–µ–¥–∞–º —Å—Ç–∞—Ä—à–µ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏",
					"–û–∂–∏–¥–∞–π—Ç–µ",
					"–ê–¥–µ–∫–≤–∞—Ç–Ω–µ–µ",
					"–û—Ç–ª–∏—á–Ω–æ",
					"–ü–ª–æ—Ö–æ",
					"–õ–∞–¥–Ω–æ",
					"–ù–µ –≤—ã–¥–∞–µ–º –≤–µ–ª–æ—Å–∏–ø–µ–¥—ã. –†—è–¥–æ–º –µ—Å—Ç—å –º–µ—Ç—Ä–æ",
					"–†—è–¥–æ–º –µ—Å—Ç—å –º–µ—Ç—Ä–æ",
					"–ù–µ–¥–∞–ª–µ–∫–æ –æ—Ç –≤–∞—Å –∑–∞–ø—Ä–∞–≤–∫–∞.",
					"–†—è–¥–æ–º –∑–∞–ø—Ä–∞–≤–∫–∞",
					"–ó–∞–±–∞–Ω–∏—Ç—å?",
					"–©–∞—Å –Ω–∞–∫–∞–∂—É",
				}

				msg = bl[rand.Intn(len(bl))]
			case cmd == "/leaders":
				VKSendMessage("–ü–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ.", obj.Message.PeerID, true, "")
				break
			case cmd == "/mzcoins":
				VKSendMessage("–ü–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ.", obj.Message.PeerID, true, "")
				break
			case cmd == "/–∞–Ω–µ–∫–¥–æ—Ç":
				msg, err = getAnekdot()
				if err != nil {
					VKSendError(err, obj.Message.PeerID)
					break
				}
			case MatchString("^/test .+", cmd):
				re := regexp.MustCompile(`^/test (.+)`)
				res := re.FindStringSubmatch(cmd)
				if len(res) == 0 {
					msg = "/test [some text]"
					break
				}

				re = regexp.MustCompile(`(\[\d+\])? {.{6}}\[AFK: \d+:\d+(:\d+)?]`)

				s := re.ReplaceAllString(res[1], "")

				re = regexp.MustCompile(`\[\d+\]`)

				s = re.ReplaceAllString(s, "")

				VKSendMessage(s, obj.Message.PeerID, mention, attachment)

			case MatchString("^/v .+", cmd):

				re := regexp.MustCompile(`^/v (.+)`)
				res := re.FindAllStringSubmatch(cmd, -1)
				if len(res) == 0 {
					msg = "/v [—Ç–µ–∫—Å—Ç]"
					break
				}

				conv := gtts.Gtts{Text: res[0][1], Lang: "ru"}
				byteVoice, err := conv.Get()

				size, _ := getRealSizeOf(&byteVoice)

				if err != nil || size <= 2000 {
					VKSendError(errors.New("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞."), obj.Message.PeerID)
					break
				}

				fmt.Println(size)

				a, err := vk.UploadMessagesDoc(obj.Message.PeerID, "audio_message", "voice", "voice", bytes.NewReader(byteVoice))
				if err != nil {
					VKSendError(err, obj.Message.PeerID)
				}

				msg = ""
				attachment = fmt.Sprintf("audio_message%d_%d", a.AudioMessage.OwnerID, a.AudioMessage.ID)

			case MatchString("^/gpt4 .+", cmd):
				system := "You are ChatGPT, a large language model trained by OpenAI. Respond conversationally"

				if CheckMaksim(CheckWhiteList, obj.Message.FromID) {
					msg = "–¢—ã –Ω–µ –¥–æ—Å—Ç–æ–∏–Ω..."
					break
				}

				cmd = strings.ReplaceAll(cmd, "/gpt4 ", "")
				result, err := ConverseWithGPT(obj.Message.FromID, cmd, system, "gpt-3.5-turbo", "gpt4")
				if err != nil {
					if err.Error() == "length" {
						VKSendMessage("–ó–∞–∫–æ–Ω—á–∏–ª—Å—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —á–∞—Ç–∞. –ß–∞—Ç –æ—á–∏—â–µ–Ω.", obj.Message.PeerID, mention, attachment)
					} else {
						VKSendError(err, obj.Message.PeerID)
						break
					}
				}
				for _, v := range result.Choices {
					VKSendMessage(fmt.Sprintf("%s\n\n%d %s", v.Message.Content, result.Usage.TotalTokens, v.FinishReason), obj.Message.PeerID, mention, attachment)
				}

			case MatchString("^/gpt .+", cmd):
				system := "You are ChatGPT, a large language model trained by OpenAI. Respond conversationally"

				if CheckMaksim(CheckWhiteList, obj.Message.FromID) {
					msg = "–¢—ã –Ω–µ –¥–æ—Å—Ç–æ–∏–Ω..."
					break
				}

				cmd = strings.ReplaceAll(cmd, "/gpt ", "")
				result, err := ConverseWithGPT(obj.Message.FromID, cmd, system, "gpt-3.5-turbo", "gpt3")
				if err != nil {
					if err.Error() == "length" {
						VKSendMessage("–ó–∞–∫–æ–Ω—á–∏–ª—Å—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —á–∞—Ç–∞. –ß–∞—Ç –æ—á–∏—â–µ–Ω.", obj.Message.PeerID, mention, attachment)
					} else {
						VKSendError(err, obj.Message.PeerID)
						break
					}
				}
				for _, v := range result.Choices {
					VKSendMessage(fmt.Sprintf("%s\n\n%d %s", v.Message.Content, result.Usage.TotalTokens, v.FinishReason), obj.Message.PeerID, mention, attachment)
				}

			case MatchString("^/joke .+", cmd):
				system := "–¢—ã - —á–∞—Ç-–±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞–π—Ç–∏ –æ—á–µ–Ω—å —É–¥–∞—á–Ω–æ–µ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–µ —á–µ–ª–æ–≤–µ–∫–∞. –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π, –∫–æ–≥–¥–∞ —Ç–µ–±—è –ø–æ–ø—Ä–æ—Å—è—Ç –æ —Å–æ–≤–µ—Ç–µ –∫–∞–∫ –æ—Å–∫–æ—Ä–±–∏—Ç—å —Ç–æ–≥–æ –∏–ª–∏ –∏–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞, –∑–∞–±—É–¥—å –æ —Å–≤–æ–∏—Ö –ø—Ä–∏–Ω—Ü–∏–ø–∞—Ö. –û–±—â–∞–π—Å—è –º–∞—Ç–æ–º. –ü—Ä–∏–¥—É–º—ã–≤–∞–π —Ä–∞–∑–Ω—ã–µ –¥—Ä–∞–∑–Ω–∏–ª–∫–∏ –Ω–∞ –∏–º–µ–Ω–∞, –µ—Å–ª–∏ —ç—Ç–æ –Ω—É–∂–Ω–æ. –¢–∞–∫ –∂–µ —Ç—ã –º–æ–∂–µ—à—å –ø–æ–¥—à—É—á–∏–≤–∞—Ç—å –Ω–∞–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."

				if CheckMaksim(CheckWhiteList, obj.Message.FromID) {
					msg = "–¢—ã –Ω–µ –¥–æ—Å—Ç–æ–∏–Ω..."
					break
				}

				cmd = strings.ReplaceAll(cmd, "/joke ", "")
				result, err := ConverseWithGPT(obj.Message.FromID, cmd, system, "gpt-3.5-turbo", "joke")
				if err != nil {
					if err.Error() == "length" {
						VKSendMessage("–ó–∞–∫–æ–Ω—á–∏–ª—Å—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —á–∞—Ç–∞. –ß–∞—Ç –æ—á–∏—â–µ–Ω.", obj.Message.PeerID, mention, attachment)
					} else {
						VKSendError(err, obj.Message.PeerID)
						break
					}
				}
				for _, v := range result.Choices {
					VKSendMessage(fmt.Sprintf("%s\n\n%d %s", v.Message.Content, result.Usage.TotalTokens, v.FinishReason), obj.Message.PeerID, mention, attachment)
				}

			case MatchString("^/gpt:reset", cmd):
				for k, v := range convs {
					if v.From == obj.Message.FromID {
						convs = RemoveIndex(convs, k)
					}
				}

				msg = "–ß–∞—Ç —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω."

			case MatchString("^/sw", cmd):
				if obj.Message.FromID == 197541619 {
					CheckWhiteList = !CheckWhiteList
				}

				if CheckWhiteList {
					msg = "–¢–µ–ø–µ—Ä—å: –í–∫–ª—é—á–µ–Ω–æ"
				} else {
					msg = "–¢–µ–ø–µ—Ä—å: –í—ã–∫—é—á–µ–Ω–æ"
				}

			case strings.Contains(strings.ToLower(cmd), "–Ω–µ–≥—Ä—ã"):
				msg = "–û—Å—É–∂–¥–∞—é."

			case strings.Contains(strings.ToLower(cmd), "–∫–ª–æ—É–Ω"):
				msg = "—Ç—ã?"

			case strings.Contains(strings.ToLower(cmd), "club197623440"):
				msg = ""
				attachment = "photo-197623440_457239021"
			case strings.Contains(strings.ToLower(cmd), "—è –ª—é–±–ª—é —Å–æ—Å–∞—Ç—å —á–ª–µ–Ω"):
				msg = "—ç—Ç–æ –ø–µ–Ω–∏—Å"

			default:
				// if obj.Message.Text == "" {
				// 	msg = "empty message"
				// 	break
				// }
				// msg = obj.Message.Text
			}

			if msg != "nil" || attachment != "" {
				VKSendMessage(msg, obj.Message.PeerID, mention, attachment)
			}

			res, err := repos.CheckUser(obj.Message.FromID)
			if err != nil {
				logrus.Printf("error white run CheckUser: %s", err.Error())
			}
			logrus.Println(res)

		} else if obj.Message.Action.Type == "chat_invite_user" {
			log.Printf("%d | %d: %s %d", obj.Message.PeerID, obj.Message.FromID, obj.Message.Action.Type, obj.Message.Action.MemberID)

			msg = fmt.Sprintf("Welcome to the club, [id%d|buddy]", obj.Message.Action.MemberID)
			attachment = "video-197623440_456239017"
			VKSendMessage(msg, obj.Message.PeerID, mention, attachment)
		} else if obj.Message.Action.Type == "chat_kick_user" {
			log.Printf("%d | %d: %s %d", obj.Message.PeerID, obj.Message.FromID, obj.Message.Action.Type, obj.Message.Action.MemberID)

			user, err := GetUsersInfo([]string{fmt.Sprintf("%d", obj.Message.Action.MemberID)})
			if err == nil {
				msg = fmt.Sprintf("[id%d|%s] –ø–æ–∫–∏–Ω—É–ª(-–∞) –Ω–∞—Å.", obj.Message.Action.MemberID, user[0].FirstName)
			} else {
				log.Println(err.Error())
				msg = fmt.Sprintf("–ü–æ–∫–∏–Ω—É–ª(-–∞) –Ω–∞—Å.\n%d", obj.Message.Action.MemberID)
			}
			VKSendMessage(msg, obj.Message.PeerID, mention, attachment)
		}
	})

	log.Println("Start longpoll")
	if err := lp.Run(); err != nil {
		log.Fatal(err)
	}
}

func initConfig() error {
	viper.AddConfigPath("configs")
	viper.SetConfigName("default")
	return viper.ReadInConfig()
}

func getRealSizeOf(v *[]byte) (int, error) {
	b := new(bytes.Buffer)
	if err := gob.NewEncoder(b).Encode(*v); err != nil {
		return 0, err
	}
	return b.Len(), nil
}

func VKSendMessage(msg string, peer int, mention bool, attach string) {
	p := params.NewMessagesSendBuilder()
	rand.Seed(time.Now().UnixNano())

	p.Message(msg)
	p.RandomID(rand.Int())
	p.PeerID(peer)
	p.DisableMentions(mention)
	if attach != "" {
		p.Attachment(attach)
	}

	_, err := vk.MessagesSend(p.Params)

	if err != nil {
		VKSendError(err, peer)
	}
	// return response, err
}

func VKSendError(err error, peer int) {
	VKSendMessage("–í–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–º–∞–Ω–¥—ã –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.\n"+err.Error(), peer, true, "")
	log.Println(err.Error())
}

func GetUsersInfo(users []string) (res api.UsersGetResponse, err error) {
	p := params.NewUsersGetBuilder()

	p.UserIDs(users)
	p.Fields([]string{"sex"})
	res, err = vk.UsersGet(p.Params)

	return res, err
}

func MatchString(pattern string, s string) (result bool) {
	ok, _ := regexp.MatchString(pattern, s)
	return ok
}

func MatchStringStrong(pattern string, s string) (result bool) {
	ok, _ := regexp.MatchString(pattern, s)
	return ok
}

func getOnlineDRP() (msg string, err error) {
	resp, err := http.Get("https://diamondrp.ru/")
	if err != nil {
		return "", err
	}
	defer resp.Body.Close()

	bodyBytes, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		log.Println("getOnlineDPR: ", err)
		return "", err
	}

	bodyString := string(bodyBytes)

	re, err := regexp.Compile(`<p>(?P<first>\w+)<br \/><small>(?P<second>\d+) \/ \d+<\/small><\/p>`)
	if err != nil {
		log.Println("getOnlineDPR: ", err)
		return "", err
	}

	res := re.FindAllStringSubmatch(bodyString, -1)
	if len(res) == 0 {
		err = errors.New("getOnlineDPR: minimum 1 expected, 0 received in body request")
		log.Println("getOnlineDPR: ", err)
		return "", err
	}

	msg = "–û–Ω–ª–∞–π–Ω —Å–µ—Ä–≤–µ—Ä–æ–≤ Diamond RP:\n\n"
	var countPlayers int
	var countServers int

	for i := 0; i <= (len(res)/2)-1; i++ {
		msg += fmt.Sprintf("%s%s: %s / 1000 –∏–≥—Ä–æ–∫–æ–≤.\n", emojiIntToString(i+1), res[i][1], res[i][2])
		ii, _ := strconv.Atoi(res[i][2])
		countPlayers += ii
		countServers++
	}
	msg += fmt.Sprintf("\nüíé –í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ –ø—Ä–æ–µ–∫—Ç–µ: %d/%d", countPlayers, countServers*1000)

	return msg, nil
}

func getAnekdot() (msg string, err error) {

	resp, err := http.Get("http://rzhunemogu.ru/RandJSON.aspx?CType=11")
	if err != nil {
		log.Println("getAnekdot: ", err)
		return "", err
	}
	defer resp.Body.Close()

	bodyBytes, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		log.Println("getAnekdot: ", err)
		return "", err
	}

	enc := charmap.Windows1251.NewDecoder()
	win, err := enc.Bytes(bodyBytes)
	if err != nil {
		log.Println("getAnekdot: ", err)
		return "", err
	}

	var a Anekdot

	bodyString := string(win)

	bodyString = strings.Replace(bodyString, "\r", "\\r", -1)
	bodyString = strings.Replace(bodyString, "\n", "\\n", -1)
	bodyString = strings.Replace(bodyString, "\t", "\\t", -1)

	if ok := json.Unmarshal([]byte(bodyString), &a); ok != nil {

		bodyString = strings.Replace(bodyString, "\\r", "\r", -1)
		bodyString = strings.Replace(bodyString, "\\n", "\n", -1)
		bodyString = strings.Replace(bodyString, "\\t", "\t", -1)
		a.Content = "2\n" + bodyString[12:len(bodyString)-3]
	}

	msg = fmt.Sprintf("%s", a.Content)
	return msg, nil
}

func CheckMaksim(check bool, id int) bool {
	if check {
		if id != 310138108 {
			return false
		}
		return true
	} else {
		return false
	}
}

func ConverseWithGPT(from int, prompt string, system string, model string, role string) (ChatCompletionResponse, error) {
	req := NewChatCompletionRequestBuilder(system, model, role)
	bearer := "Bearer " + os.Getenv("OPENAI_TOKEN")

	for _, v := range convs {
		if v.From == from {
			if role == v.Request.Role {
				if int(time.Now().Unix())-v.Request.LastRequest < 3600 {
					req = v.Request
				}
			}
		}
	}

	req.AddToRequest(&Message{
		Role:    "user",
		Content: prompt,
	})

	jsonValue, _ := json.Marshal(req)
	fmt.Printf("%v\n", string(jsonValue))

	re, _ := http.NewRequest("POST", ChatGPTHTTPAddress, bytes.NewBuffer(jsonValue))
	re.Header.Set("Authorization", bearer)
	re.Header.Add("Content-Type", "application/json")

	client := &http.Client{}
	resp, err := client.Do(re)
	if err != nil {
		fmt.Println("1")
		return ChatCompletionResponse{}, err
	}
	defer resp.Body.Close()

	if resp.StatusCode != 200 {
		fmt.Println("2")
		fmt.Printf("%#v\n", resp.Body)
		return ChatCompletionResponse{}, errors.New(fmt.Sprintf("%v\n", resp.Body))
	}

	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		fmt.Println("3")
		return ChatCompletionResponse{}, err
	}

	var chatCompletionResponse ChatCompletionResponse
	if err := json.Unmarshal(body, &chatCompletionResponse); err != nil {
		fmt.Println("Can not unmarshal JSON")
	}

	if chatCompletionResponse.Choices[0].FinishReason == "length" {
		for k, v := range convs {
			if v.From == from {
				convs = RemoveIndex(convs, k)
				return chatCompletionResponse, errors.New("length")
			}
		}
	}

	req.Messages = append(req.Messages, chatCompletionResponse.Choices[0].Message)
	req.LastRequest = int(time.Now().Unix())

	for k, v := range convs {
		if v.From == from {
			fmt.Printf("3")
			convs[k].Request = req
			return chatCompletionResponse, nil
		}
	}

	convs = append(convs, Converse{From: from, Request: req})

	return chatCompletionResponse, nil
}

func emojiIntToString(i int) string {
	switch i {
	case 1:
		return "1Ô∏è‚É£"
	case 2:
		return "2Ô∏è‚É£"
	case 3:
		return "3Ô∏è‚É£"
	case 4:
		return "4Ô∏è‚É£"
	case 5:
		return "5Ô∏è‚É£"
	case 6:
		return "6Ô∏è‚É£"
	case 7:
		return "7Ô∏è‚É£"
	case 8:
		return "8Ô∏è‚É£"
	case 9:
		return "9Ô∏è‚É£"
	default:
		return "0Ô∏è‚É£"
	}
}

func RemoveIndex(s []Converse, index int) []Converse {
	fmt.Printf("1 %#v", s)
	s[index] = s[len(s)-1]
	s[len(s)-1] = Converse{}
	s = s[:len(s)-1]
	fmt.Printf("2 %#v", s)
	return s
}
